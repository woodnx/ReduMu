// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"context"
	"github.com/woodnx/ReduMu/api/internal/domain/model"
	"sync"
)

// Ensure, that ITaskRepoMock does implement ITaskRepo.
// If this is not the case, regenerate this file with moq.
var _ ITaskRepo = &ITaskRepoMock{}

// ITaskRepoMock is a mock implementation of ITaskRepo.
//
//	func TestSomethingThatUsesITaskRepo(t *testing.T) {
//
//		// make and configure a mocked ITaskRepo
//		mockedITaskRepo := &ITaskRepoMock{
//			CreateFunc: func(ctx context.Context, task *model.Task) error {
//				panic("mock out the Create method")
//			},
//			FindByIDFunc: func(ctx context.Context, id model.TaskID) (*model.Task, error) {
//				panic("mock out the FindByID method")
//			},
//			GetAllFunc: func(ctx context.Context) (model.Tasks, error) {
//				panic("mock out the GetAll method")
//			},
//		}
//
//		// use mockedITaskRepo in code that requires ITaskRepo
//		// and then make assertions.
//
//	}
type ITaskRepoMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, task *model.Task) error

	// FindByIDFunc mocks the FindByID method.
	FindByIDFunc func(ctx context.Context, id model.TaskID) (*model.Task, error)

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) (model.Tasks, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Task is the task argument value.
			Task *model.Task
		}
		// FindByID holds details about calls to the FindByID method.
		FindByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID model.TaskID
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCreate   sync.RWMutex
	lockFindByID sync.RWMutex
	lockGetAll   sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ITaskRepoMock) Create(ctx context.Context, task *model.Task) error {
	if mock.CreateFunc == nil {
		panic("ITaskRepoMock.CreateFunc: method is nil but ITaskRepo.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Task *model.Task
	}{
		Ctx:  ctx,
		Task: task,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, task)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedITaskRepo.CreateCalls())
func (mock *ITaskRepoMock) CreateCalls() []struct {
	Ctx  context.Context
	Task *model.Task
} {
	var calls []struct {
		Ctx  context.Context
		Task *model.Task
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// FindByID calls FindByIDFunc.
func (mock *ITaskRepoMock) FindByID(ctx context.Context, id model.TaskID) (*model.Task, error) {
	if mock.FindByIDFunc == nil {
		panic("ITaskRepoMock.FindByIDFunc: method is nil but ITaskRepo.FindByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  model.TaskID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindByID.Lock()
	mock.calls.FindByID = append(mock.calls.FindByID, callInfo)
	mock.lockFindByID.Unlock()
	return mock.FindByIDFunc(ctx, id)
}

// FindByIDCalls gets all the calls that were made to FindByID.
// Check the length with:
//
//	len(mockedITaskRepo.FindByIDCalls())
func (mock *ITaskRepoMock) FindByIDCalls() []struct {
	Ctx context.Context
	ID  model.TaskID
} {
	var calls []struct {
		Ctx context.Context
		ID  model.TaskID
	}
	mock.lockFindByID.RLock()
	calls = mock.calls.FindByID
	mock.lockFindByID.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *ITaskRepoMock) GetAll(ctx context.Context) (model.Tasks, error) {
	if mock.GetAllFunc == nil {
		panic("ITaskRepoMock.GetAllFunc: method is nil but ITaskRepo.GetAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedITaskRepo.GetAllCalls())
func (mock *ITaskRepoMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

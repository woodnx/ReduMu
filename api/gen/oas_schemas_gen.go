// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/Actual
type Actual struct {
	ID        uuid.UUID   `json:"id"`
	Target    []uuid.UUID `json:"target"`
	Since     time.Time   `json:"since"`
	Until     time.Time   `json:"until"`
	CreatedAt time.Time   `json:"createdAt"`
	UpdatedAt OptDate     `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Actual) GetID() uuid.UUID {
	return s.ID
}

// GetTarget returns the value of Target.
func (s *Actual) GetTarget() []uuid.UUID {
	return s.Target
}

// GetSince returns the value of Since.
func (s *Actual) GetSince() time.Time {
	return s.Since
}

// GetUntil returns the value of Until.
func (s *Actual) GetUntil() time.Time {
	return s.Until
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Actual) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Actual) GetUpdatedAt() OptDate {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Actual) SetID(val uuid.UUID) {
	s.ID = val
}

// SetTarget sets the value of Target.
func (s *Actual) SetTarget(val []uuid.UUID) {
	s.Target = val
}

// SetSince sets the value of Since.
func (s *Actual) SetSince(val time.Time) {
	s.Since = val
}

// SetUntil sets the value of Until.
func (s *Actual) SetUntil(val time.Time) {
	s.Until = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Actual) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Actual) SetUpdatedAt(val OptDate) {
	s.UpdatedAt = val
}

// ActualsPostCreated is response for ActualsPost operation.
type ActualsPostCreated struct{}

type ActualsPostReq struct {
	Title  string    `json:"title"`
	Target uuid.UUID `json:"target"`
}

// GetTitle returns the value of Title.
func (s *ActualsPostReq) GetTitle() string {
	return s.Title
}

// GetTarget returns the value of Target.
func (s *ActualsPostReq) GetTarget() uuid.UUID {
	return s.Target
}

// SetTitle sets the value of Title.
func (s *ActualsPostReq) SetTitle(val string) {
	s.Title = val
}

// SetTarget sets the value of Target.
func (s *ActualsPostReq) SetTarget(val uuid.UUID) {
	s.Target = val
}

// Ref: #/Error
type Error struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// NewOptActualsPostReq returns new OptActualsPostReq with value set to v.
func NewOptActualsPostReq(v ActualsPostReq) OptActualsPostReq {
	return OptActualsPostReq{
		Value: v,
		Set:   true,
	}
}

// OptActualsPostReq is optional ActualsPostReq.
type OptActualsPostReq struct {
	Value ActualsPostReq
	Set   bool
}

// IsSet returns true if OptActualsPostReq was set.
func (o OptActualsPostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActualsPostReq) Reset() {
	var v ActualsPostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActualsPostReq) SetTo(v ActualsPostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActualsPostReq) Get() (v ActualsPostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActualsPostReq) Or(d ActualsPostReq) ActualsPostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSchedulesPostReq returns new OptSchedulesPostReq with value set to v.
func NewOptSchedulesPostReq(v SchedulesPostReq) OptSchedulesPostReq {
	return OptSchedulesPostReq{
		Value: v,
		Set:   true,
	}
}

// OptSchedulesPostReq is optional SchedulesPostReq.
type OptSchedulesPostReq struct {
	Value SchedulesPostReq
	Set   bool
}

// IsSet returns true if OptSchedulesPostReq was set.
func (o OptSchedulesPostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSchedulesPostReq) Reset() {
	var v SchedulesPostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSchedulesPostReq) SetTo(v SchedulesPostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSchedulesPostReq) Get() (v SchedulesPostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSchedulesPostReq) Or(d SchedulesPostReq) SchedulesPostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTasksPostReq returns new OptTasksPostReq with value set to v.
func NewOptTasksPostReq(v TasksPostReq) OptTasksPostReq {
	return OptTasksPostReq{
		Value: v,
		Set:   true,
	}
}

// OptTasksPostReq is optional TasksPostReq.
type OptTasksPostReq struct {
	Value TasksPostReq
	Set   bool
}

// IsSet returns true if OptTasksPostReq was set.
func (o OptTasksPostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTasksPostReq) Reset() {
	var v TasksPostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTasksPostReq) SetTo(v TasksPostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTasksPostReq) Get() (v TasksPostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTasksPostReq) Or(d TasksPostReq) TasksPostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTasksScheduledPostReq returns new OptTasksScheduledPostReq with value set to v.
func NewOptTasksScheduledPostReq(v TasksScheduledPostReq) OptTasksScheduledPostReq {
	return OptTasksScheduledPostReq{
		Value: v,
		Set:   true,
	}
}

// OptTasksScheduledPostReq is optional TasksScheduledPostReq.
type OptTasksScheduledPostReq struct {
	Value TasksScheduledPostReq
	Set   bool
}

// IsSet returns true if OptTasksScheduledPostReq was set.
func (o OptTasksScheduledPostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTasksScheduledPostReq) Reset() {
	var v TasksScheduledPostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTasksScheduledPostReq) SetTo(v TasksScheduledPostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTasksScheduledPostReq) Get() (v TasksScheduledPostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTasksScheduledPostReq) Or(d TasksScheduledPostReq) TasksScheduledPostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsersPostReq returns new OptUsersPostReq with value set to v.
func NewOptUsersPostReq(v UsersPostReq) OptUsersPostReq {
	return OptUsersPostReq{
		Value: v,
		Set:   true,
	}
}

// OptUsersPostReq is optional UsersPostReq.
type OptUsersPostReq struct {
	Value UsersPostReq
	Set   bool
}

// IsSet returns true if OptUsersPostReq was set.
func (o OptUsersPostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsersPostReq) Reset() {
	var v UsersPostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsersPostReq) SetTo(v UsersPostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsersPostReq) Get() (v UsersPostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsersPostReq) Or(d UsersPostReq) UsersPostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/Schedule
type Schedule struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Since     time.Time `json:"since"`
	Until     time.Time `json:"until"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt OptDate   `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Schedule) GetID() uuid.UUID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Schedule) GetTitle() string {
	return s.Title
}

// GetSince returns the value of Since.
func (s *Schedule) GetSince() time.Time {
	return s.Since
}

// GetUntil returns the value of Until.
func (s *Schedule) GetUntil() time.Time {
	return s.Until
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Schedule) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Schedule) GetUpdatedAt() OptDate {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Schedule) SetID(val uuid.UUID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Schedule) SetTitle(val string) {
	s.Title = val
}

// SetSince sets the value of Since.
func (s *Schedule) SetSince(val time.Time) {
	s.Since = val
}

// SetUntil sets the value of Until.
func (s *Schedule) SetUntil(val time.Time) {
	s.Until = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Schedule) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Schedule) SetUpdatedAt(val OptDate) {
	s.UpdatedAt = val
}

// Ref: #/ScheduledTask
type ScheduledTask struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Status    string    `json:"status"`
	Since     time.Time `json:"since"`
	Until     time.Time `json:"until"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt OptDate   `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *ScheduledTask) GetID() uuid.UUID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *ScheduledTask) GetTitle() string {
	return s.Title
}

// GetStatus returns the value of Status.
func (s *ScheduledTask) GetStatus() string {
	return s.Status
}

// GetSince returns the value of Since.
func (s *ScheduledTask) GetSince() time.Time {
	return s.Since
}

// GetUntil returns the value of Until.
func (s *ScheduledTask) GetUntil() time.Time {
	return s.Until
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ScheduledTask) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ScheduledTask) GetUpdatedAt() OptDate {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *ScheduledTask) SetID(val uuid.UUID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *ScheduledTask) SetTitle(val string) {
	s.Title = val
}

// SetStatus sets the value of Status.
func (s *ScheduledTask) SetStatus(val string) {
	s.Status = val
}

// SetSince sets the value of Since.
func (s *ScheduledTask) SetSince(val time.Time) {
	s.Since = val
}

// SetUntil sets the value of Until.
func (s *ScheduledTask) SetUntil(val time.Time) {
	s.Until = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ScheduledTask) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ScheduledTask) SetUpdatedAt(val OptDate) {
	s.UpdatedAt = val
}

// SchedulesPostCreated is response for SchedulesPost operation.
type SchedulesPostCreated struct{}

type SchedulesPostReq struct {
	Title OptString `json:"title"`
}

// GetTitle returns the value of Title.
func (s *SchedulesPostReq) GetTitle() OptString {
	return s.Title
}

// SetTitle sets the value of Title.
func (s *SchedulesPostReq) SetTitle(val OptString) {
	s.Title = val
}

// Ref: #/Task
type Task struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Deadline  time.Time `json:"deadline"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt OptDate   `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Task) GetID() uuid.UUID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Task) GetTitle() string {
	return s.Title
}

// GetDeadline returns the value of Deadline.
func (s *Task) GetDeadline() time.Time {
	return s.Deadline
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Task) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Task) GetUpdatedAt() OptDate {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Task) SetID(val uuid.UUID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Task) SetTitle(val string) {
	s.Title = val
}

// SetDeadline sets the value of Deadline.
func (s *Task) SetDeadline(val time.Time) {
	s.Deadline = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Task) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Task) SetUpdatedAt(val OptDate) {
	s.UpdatedAt = val
}

// TasksPostCreated is response for TasksPost operation.
type TasksPostCreated struct{}

type TasksPostReq struct {
	Title OptString `json:"title"`
}

// GetTitle returns the value of Title.
func (s *TasksPostReq) GetTitle() OptString {
	return s.Title
}

// SetTitle sets the value of Title.
func (s *TasksPostReq) SetTitle(val OptString) {
	s.Title = val
}

// TasksScheduledPostCreated is response for TasksScheduledPost operation.
type TasksScheduledPostCreated struct{}

type TasksScheduledPostReq struct {
	Title OptString `json:"title"`
}

// GetTitle returns the value of Title.
func (s *TasksScheduledPostReq) GetTitle() OptString {
	return s.Title
}

// SetTitle sets the value of Title.
func (s *TasksScheduledPostReq) SetTitle(val OptString) {
	s.Title = val
}

// Ref: #/User
type User struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// GetID returns the value of ID.
func (s *User) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *User) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}

// UsersPostCreated is response for UsersPost operation.
type UsersPostCreated struct{}

type UsersPostReq struct {
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *UsersPostReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *UsersPostReq) SetName(val string) {
	s.Name = val
}
